# SAP GUI Scripting を使用して SAP にログインする PowerShell スクリプト
# ログイン情報はダイアログから入力

# SAP GUI Scripting が有効になっていることを確認してください
# また、SAP GUI がインストールされている必要があります

# ログイン情報入力用のダイアログを表示する関数
function Show-SapLoginDialog {
    Add-Type -AssemblyName System.Windows.Forms
    Add-Type -AssemblyName System.Drawing

    # フォームの作成
    $form = New-Object System.Windows.Forms.Form
    $form.Text = "SAP ログイン"
    $form.Size = New-Object System.Drawing.Size(400, 320)
    $form.StartPosition = "CenterScreen"
    $form.FormBorderStyle = "FixedDialog"
    $form.MaximizeBox = $false
    $form.MinimizeBox = $false
    
    # アイコン設定（オプション）
    # $iconPath = "C:\path\to\icon.ico"
    # if (Test-Path $iconPath) {
    #     $form.Icon = [System.Drawing.Icon]::ExtractAssociatedIcon($iconPath)
    # }

    # 説明ラベル
    $label = New-Object System.Windows.Forms.Label
    $label.Location = New-Object System.Drawing.Point(10, 10)
    $label.Size = New-Object System.Drawing.Size(380, 20)
    $label.Text = "SAP システムへのログイン情報を入力してください:"
    $form.Controls.Add($label)

    # 接続文字列
    $connLabel = New-Object System.Windows.Forms.Label
    $connLabel.Location = New-Object System.Drawing.Point(10, 40)
    $connLabel.Size = New-Object System.Drawing.Size(120, 20)
    $connLabel.Text = "接続文字列:"
    $form.Controls.Add($connLabel)
    
    $connTextBox = New-Object System.Windows.Forms.TextBox
    $connTextBox.Location = New-Object System.Drawing.Point(140, 40)
    $connTextBox.Size = New-Object System.Drawing.Size(240, 20)
    $connTextBox.Text = "/H/sapserver/S/3200"
    $form.Controls.Add($connTextBox)

    # システムID
    $sysLabel = New-Object System.Windows.Forms.Label
    $sysLabel.Location = New-Object System.Drawing.Point(10, 70)
    $sysLabel.Size = New-Object System.Drawing.Size(120, 20)
    $sysLabel.Text = "システムID:"
    $form.Controls.Add($sysLabel)
    
    $sysTextBox = New-Object System.Windows.Forms.TextBox
    $sysTextBox.Location = New-Object System.Drawing.Point(140, 70)
    $sysTextBox.Size = New-Object System.Drawing.Size(240, 20)
    $form.Controls.Add($sysTextBox)

    # クライアント番号
    $clientLabel = New-Object System.Windows.Forms.Label
    $clientLabel.Location = New-Object System.Drawing.Point(10, 100)
    $clientLabel.Size = New-Object System.Drawing.Size(120, 20)
    $clientLabel.Text = "クライアント番号:"
    $form.Controls.Add($clientLabel)
    
    $clientTextBox = New-Object System.Windows.Forms.TextBox
    $clientTextBox.Location = New-Object System.Drawing.Point(140, 100)
    $clientTextBox.Size = New-Object System.Drawing.Size(240, 20)
    $clientTextBox.Text = "100"
    $form.Controls.Add($clientTextBox)

    # ユーザー名
    $userLabel = New-Object System.Windows.Forms.Label
    $userLabel.Location = New-Object System.Drawing.Point(10, 130)
    $userLabel.Size = New-Object System.Drawing.Size(120, 20)
    $userLabel.Text = "ユーザー名:"
    $form.Controls.Add($userLabel)
    
    $userTextBox = New-Object System.Windows.Forms.TextBox
    $userTextBox.Location = New-Object System.Drawing.Point(140, 130)
    $userTextBox.Size = New-Object System.Drawing.Size(240, 20)
    $form.Controls.Add($userTextBox)

    # パスワード
    $passLabel = New-Object System.Windows.Forms.Label
    $passLabel.Location = New-Object System.Drawing.Point(10, 160)
    $passLabel.Size = New-Object System.Drawing.Size(120, 20)
    $passLabel.Text = "パスワード:"
    $form.Controls.Add($passLabel)
    
    $passTextBox = New-Object System.Windows.Forms.MaskedTextBox
    $passTextBox.Location = New-Object System.Drawing.Point(140, 160)
    $passTextBox.Size = New-Object System.Drawing.Size(240, 20)
    $passTextBox.PasswordChar = '*'
    $form.Controls.Add($passTextBox)

    # 言語コード
    $langLabel = New-Object System.Windows.Forms.Label
    $langLabel.Location = New-Object System.Drawing.Point(10, 190)
    $langLabel.Size = New-Object System.Drawing.Size(120, 20)
    $langLabel.Text = "言語コード:"
    $form.Controls.Add($langLabel)
    
    $langTextBox = New-Object System.Windows.Forms.TextBox
    $langTextBox.Location = New-Object System.Drawing.Point(140, 190)
    $langTextBox.Size = New-Object System.Drawing.Size(240, 20)
    $langTextBox.Text = "JA"
    $form.Controls.Add($langTextBox)

    # OKボタン
    $okButton = New-Object System.Windows.Forms.Button
    $okButton.Location = New-Object System.Drawing.Point(140, 230)
    $okButton.Size = New-Object System.Drawing.Size(100, 30)
    $okButton.Text = "OK"
    $okButton.DialogResult = [System.Windows.Forms.DialogResult]::OK
    $form.AcceptButton = $okButton
    $form.Controls.Add($okButton)

    # キャンセルボタン
    $cancelButton = New-Object System.Windows.Forms.Button
    $cancelButton.Location = New-Object System.Drawing.Point(250, 230)
    $cancelButton.Size = New-Object System.Drawing.Size(100, 30)
    $cancelButton.Text = "キャンセル"
    $cancelButton.DialogResult = [System.Windows.Forms.DialogResult]::Cancel
    $form.CancelButton = $cancelButton
    $form.Controls.Add($cancelButton)

    # フォームのコントロールにアクセスするためのハッシュテーブル
    $formData = @{
        Form = $form
        ConnectionString = $connTextBox
        SystemID = $sysTextBox
        ClientNumber = $clientTextBox
        Username = $userTextBox
        Password = $passTextBox
        Language = $langTextBox
    }

    return $formData
}

try {
    # ログインダイアログを表示
    $loginDialog = Show-SapLoginDialog
    $result = $loginDialog.Form.ShowDialog()
    
    # キャンセルボタンが押された場合は終了
    if ($result -ne [System.Windows.Forms.DialogResult]::OK) {
        Write-Host "操作がキャンセルされました。"
        return
    }
    
    # ダイアログからログイン情報を取得
    $ConnectionString = $loginDialog.ConnectionString.Text
    $SystemID = $loginDialog.SystemID.Text
    $ClientNumber = $loginDialog.ClientNumber.Text
    $Username = $loginDialog.Username.Text
    $Password = $loginDialog.Password.Text
    $Language = $loginDialog.Language.Text
    
    # 入力値の検証
    if ([string]::IsNullOrEmpty($SystemID) -or [string]::IsNullOrEmpty($ClientNumber) -or 
        [string]::IsNullOrEmpty($Username) -or [string]::IsNullOrEmpty($Password)) {
        throw "必須項目が入力されていません。"
    }
    
    # SAP GUI オブジェクトの作成
    $SapGuiAuto = New-Object -ComObject "SapGui.ScriptingCtrl.1"
    
    # SAP GUI が正常に開始されたか確認
    if ($SapGuiAuto.GetType().InvokeMember("IsRunning", "GetProperty", $null, $SapGuiAuto, $null)) {
        # 既に接続されているアプリケーションを取得
        $SapApp = $SapGuiAuto.GetScriptingEngine
        
        # 新しい接続を開く（既存の接続がない場合）
        if ($SapApp.Connections.Count -eq 0) {
            Write-Host "新しい SAP 接続を作成します..."
            $Connection = $SapApp.OpenConnection($SystemID, $true)
        } else {
            # 既存の最初の接続を使用
            $Connection = $SapApp.Connections.Item(0)
        }
        
        # セッションの取得
        $Session = $Connection.Children.Item(0)
        
        # ログイン画面が表示されている場合はログイン情報を入力
        if ($Session.Info.Transaction -eq "S000") {
            # クライアント入力
            $Session.FindById("wnd[0]/usr/txtRSYST-MANDT").Text = $ClientNumber
            # ユーザー名入力
            $Session.FindById("wnd[0]/usr/txtRSYST-BNAME").Text = $Username
            # パスワード入力
            $Session.FindById("wnd[0]/usr/pwdRSYST-BCODE").Text = $Password
            # 言語入力
            $Session.FindById("wnd[0]/usr/txtRSYST-LANGU").Text = $Language
            # ログインボタンをクリック
            $Session.FindById("wnd[0]").SendVKey(0) # Enter キー
            
            Write-Host "SAP にログインしました"
        } else {
            Write-Host "既にログインしています。現在のトランザクション: $($Session.Info.Transaction)"
        }
        
        # ここから SAP での操作を続けることができます
        # 例: トランザクションコードを実行
        # $Session.StartTransaction("トランザクションコード")
        
    } else {
        Write-Error "SAP GUI が実行されていません"
    }
}
catch {
    Write-Error "エラーが発生しました: $_"
}
finally {
    # ダイアログフォームを破棄
    if ($null -ne $loginDialog -and $null -ne $loginDialog.Form) {
        $loginDialog.Form.Dispose()
    }
    
    # COMオブジェクトの解放
    if ($null -ne $Session) {
        [System.Runtime.Interopservices.Marshal]::ReleaseComObject($Session) | Out-Null
    }
    if ($null -ne $Connection) {
        [System.Runtime.Interopservices.Marshal]::ReleaseComObject($Connection) | Out-Null
    }
    if ($null -ne $SapApp) {
        [System.Runtime.Interopservices.Marshal]::ReleaseComObject($SapApp) | Out-Null
    }
    if ($null -ne $SapGuiAuto) {
        [System.Runtime.Interopservices.Marshal]::ReleaseComObject($SapGuiAuto) | Out-Null
    }
    
    [System.GC]::Collect()
    [System.GC]::WaitForPendingFinalizers()
}
